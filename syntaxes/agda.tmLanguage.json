{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Agda",
  "scopeName": "source.agda",
  "fileTypes": ["agda"],
  "keyEquivalent": "^~A",
  "patterns": [
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#punctuation"
    },
    {
      "include": "#literals"
    },
    {
      "include": "#comments"
    },
    {
      "include": "#pragmas"
    },
    {
      "include": "#declarations"
    }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.agda",
          "match": "(?<=^|\\s)(abstract|constructor|do|field|forall|import|in|infix|infixl|infixr|instance|interleaved|let|macro|mutual|open|overlap|pattern|postulate|primitive|quote|quoteTerm|rewrite|syntax|tactic|unquote|unquoteDecl|unquoteDef|variable|with)(?=$|\\s)"
        },
        {
          "name": "support.type.universe.agda",
          "match": "(?<=^|\\s)((SSet|Set|Prop)ω?(\\d*|(₀|₁|₂|₃|₄|₅|₆|₇|₈|₉)*)|(LevelUniv))(?=$|\\s)"
        },
        {
          "name": "storage.type.class.agda",
          "match": "(?<=^|\\s)(data|record)(?=$|\\s)"
        },
        {
          "name": "storage.modifier.public.agda",
          "match": "(?<=^|\\s)(public)(?=$|\\s)"
        },
        {
          "name": "storage.modifier.private.agda",
          "match": "(?<=^|\\s)(private)(?=$|\\s)"
        },
        {
          "name": "storage.modifier.inductivity.agda",
          "match": "(?<=^|\\s)(co)?(inductive)(?=$|\\s)"
        },
        {
          "name": "storage.modifier.eta-equality.agda",
          "match": "(?<=^|\\s)(no-)?(eta-equality)(?=$|\\s)"
        },
        {
          "name": "keyword.operator.agda",
          "match": "(?<=^|\\s)(=|\\?|->|→|forall|∀|\\\\|λ|\\.)(?=$|\\s)"
        },
        {
          "name": "keyword.operator.colon.agda",
          "match": "(?<=^|\\s):(?=$|\\s)"
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.agda",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.agda",
          "match": "\\\\."
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "name": "punctuation.agda",
          "match": "(?<=^|\\s)(:|=|\\?|->|→|forall|∀|\\\\|λ|;|\\.|\\.\\.|\\.\\.\\.)(?=$|\\s)"
        },
        {
          "name": "punctuation.definition.agda",
          "match": "(?<=^|\\s)(:|=)(?=$|\\s)"
        },
        {
          "name": "punctuation.section.parens.begin.agda",
          "match": "\\("
        },
        {
          "name": "punctuation.section.parens.end.agda",
          "match": "\\)"
        },
        {
          "name": "punctuation.section.braces.begin.agda",
          "match": "(?<!\\{)\\{(?![\\{-])"
        },
        {
          "name": "punctuation.section.braces.end.agda",
          "match": "(?<![\\}-])\\}(?!\\})"
        },
        {
          "name": "punctuation.section.double-braces.begin.agda",
          "match": "(\\}\\}|⦄)"
        },
        {
          "name": "punctuation.section.double-braces.end.agda",
          "match": "(\\{\\{|⦃)"
        }
      ]
    },
    "literals": {
      "patterns": [
        {
          "name": "constant.numeric.integer.agda",
          "match": "(?<=^|\\s)(-?(0x\\h+|0b[01]+|\\d+(_\\d+)*))(?=$|\\s)"
        },
        {
          "name": "constant.numeric.float.agda",
          "match": "(?<=^|\\s)(-?\\d+\\.\\d+([eE][+-]?\\d+)?|-?\\d+[eE][+-]?\\d+)(?=$|\\s)"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-dash.agda",
          "match": "--.*$"
        },
        {
          "name": "comment.block.agda",
          "begin": "\\{-(?!#)",
          "end": "-\\}"
        }
      ]
    },
    "pragmas": {
      "patterns": [
        {
          "name": "meta.pragma.agda",
          "begin": "\\{-#",
          "end": "#-\\}"
        }
      ]
    },
    "declarations": {
      "patterns": [
        {
          "name": "meta.module.declaration.agda",
          "begin": "^\\s*(module)\\s+([^\\(\\)\\{\\}[:space:]=→λ∀?][^\\(\\)\\{\\}[:space:]]*)(?=$|\\s)",
          "end": "(?<=^|\\s)(where)(?=$|\\s)",
          "beginCaptures": {
            "1": { "name": "keyword.control.module.agda" },
            "2": { "name": "entity.name.type.module.agda" },
            "3": { "name": "meta.parameters.module.agda" }
          },
          "endCaptures": {
            "1": { "name": "keyword.control.where.module.agda" }
          }
        },
        {
          "name": "variable.language.wildcard.agda",
          "match": "(?<=^|\\s)_(?=$|\\s)"
        }
      ]
    }
  }
}
