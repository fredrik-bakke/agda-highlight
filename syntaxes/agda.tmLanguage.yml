$schema: https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json
name: Agda
scopeName: source.agda
fileTypes: [agda]
keyEquivalent: ^~A

patterns:
  - include: "#literal"
  - include: "#pragma"
  - include: "#block_comment"
  - include: "#dash_comment"

  - include: "#module_declaration"
  - include: "#data_declaration"
  - include: "#record_declaration"
  - include: "#open_import_statement"

  - include: "#infix_statement"
  - include: "#constructor_statement"

  - include: "#lambda_expression"
  - include: "#builtin_sort"
  - include: "#reserved"

  - include: "#top_level_type_signature_colon_on_first_line"
  # - include: "#top_level_definition_equals_on_first_line"

  - include: "#wildcard"
  - include: "#discard"

  - comment: badly placed keywords
    name: invalid.illegal.keyword.agda
    match: (?<=^|[\s(){}.;@"])(data|module|record|where)(?=$|[\s(){}.;@"])

  - include: "#qualified_name"

repository:
  module_declaration:
    contentName: meta.declaration.module.agda
    begin: (^|\G)\s*(module)(?=$|[\s(){}.;@"])
    end: ((?<=^|[\s(){}.;@"])where(?=$|[\s(){}.;@"]))|^\1\S
    beginCaptures:
      "2": { name: keyword.control.module.agda }
    endCaptures:
      "0": { name: keyword.control.where.module.agda }
    patterns:
      - begin: (?<=(^|(^|[\s(){}.;@"])module\s)\s*)(((_?(?!')([^\s(){}.;@"_:=]|[^\s(){}.;@"_]{2,}))(_(?!')([^\s(){}.;@"_:=]|[^\s(){}.;@"_]{2,}))*_?)(\.(_?(?!')([^\s(){}.;@"_:=]|[^\s(){}.;@"_]{2,}))(_(?!')([^\s(){}.;@"_:=]|[^\s(){}.;@"_]{2,}))*_?)*|_)(?=$|[\s(){}.;@"])
        end: (?=[\s(){}.;@"]where($|[\s(){}.;@"]))
        beginCaptures:
          "0":
            name: entity.name.namespace.module.agda
            patterns:
              - include: "#module_label"
        contentName: meta.declaration.parameters.module.agda
        patterns:
          - include: "#parameter_declaration"
          - include: "#reserved"

  data_declaration:
    contentName: meta.declaration.data.agda
    begin: (^|\G)\s*(data)(?=$|[\s(){}.;@"])
    end: ((?<=[\s(){}.;@"])where(?=$|[\s(){}.;@"]))|^\1\S
    beginCaptures:
      "2": { name: keyword.control.data.agda }
    endCaptures:
      "1": { name: keyword.control.where.data.agda }
    patterns:
      - begin: (?<=(^|(^|[\s(){}.;@"])data\s)\s*)((_?(?!')([^\s(){}.;@"_:=]|[^\s(){}.;@"_]{2,}))(_(?!')([^\s(){}.;@"_:=]|[^\s(){}.;@"_]{2,}))*_?|_)(?=$|[\s(){}.;@"])
        end: (?=[\s(){}.;@"]where($|[\s(){}.;@"]))
        beginCaptures:
          "0":
            name: entity.name.namespace.module.agda
            patterns:
              - include: "#module_label"
        contentName: meta.declaration.parameters.data.agda
        patterns:
          - include: "#parameter_declaration"
          - include: "#type" # This one only matches after the colon, as all arguments before the colon will have been matched by #parameter_declaration
          - include: "#reserved" # TODO: this is a bit of a hack, would rather recognize the colon more deliberately

  record_declaration:
    contentName: meta.declaration.record.agda
    begin: (^|\G)\s*(record)(?=$|[\s(){}.;@"])
    end: ((?<=^|[\s(){}.;@"])where(?=$|[\s(){}.;@"]))|^\1\S
    beginCaptures:
      "2": { name: keyword.control.record.agda }
    endCaptures:
      "1": { name: keyword.control.where.record.agda }
    patterns:
      - comment: Capture name of record
        begin: (?<=(^|(^|[\s(){}.;@"])record\s)\s*)((_?(?!')([^\s(){}.;@"_:=]|[^\s(){}.;@"_]{2,}))(_(?!')([^\s(){}.;@"_:=]|[^\s(){}.;@"_]{2,}))*_?|_)(?=$|[\s(){}.;@"])
        end: (?=[\s(){}.;@"]where($|[\s(){}.;@"]))
        beginCaptures:
          "0":
            name: entity.name.namespace.module.agda
            patterns:
              - include: "#module_label"
        contentName: meta.declaration.parameters.record.agda
        patterns:
          - include: "#parameter_declaration"
          - include: "#type"
          - include: "#reserved" # TODO: this is a bit of a hack, would rather recognize the colon more deliberately

  open_import_statement:
    begin: (^|\G)(\s*)(import|open(\s+import)?)(?=$|\s)
    beginCaptures:
      "3": { name: keyword.control.open_import }
    while: ^\2\s
    patterns:
      - begin: \(
        beginCaptures:
          "0": { name: punctuation.section.parens.begin.agda }
        end: \)
        endCaptures:
          "0": { name: punctuation.section.parens.end.agda }
        name: meta.statement.open_import.names.agda
        patterns:
          - match: (?<=^|[\s(){}.;@"])to(?=$|[\s(){}.;@"])
            name: keyword.other.to.agda
          - include: "#term_name"
      - include: "#reserved"
      - include: "#module_qualified_name"

  infix_statement:
    begin: (^|\G)(\s*)(infix(l|r)?)(?=$|[\s(){}.;@"])
    while: ^\2\s
    beginCaptures:
      "3": { name: keyword.control.infix.agda }
    name: meta.statement.infix.agda
    contentName: meta.declaration.infix.arguments.agda
    patterns:
      - include: "#literal"
      - include: "#term_name"

  constructor_statement:
    begin: (^|\G)(\s*)(constructor)(?=$|[\s(){}.;@"])
    while: ^\2\s
    beginCaptures:
      "3": { name: keyword.control.constructor.agda }
    name: meta.statement.constructor.agda
    contentName: invalid
    patterns:
      - include: "#literal"
      - include: "#term_name"

  parameter_declaration:
    patterns:
      - include: "#explicit_forall_parameter_declaration"
      - include: "#instance_forall_parameter_declaration"
      - include: "#implicit_forall_parameter_declaration"
      - include: "#explicit_parameter_declaration"
      - include: "#instance_parameter_declaration"
      - include: "#implicit_parameter_declaration"

  instance_parameter_declaration:
    patterns:
      - include: "#instance_parameter_declaration_double_brace"
      - include: "#instance_parameter_declaration_unicode"

  instance_forall_parameter_declaration:
    patterns:
      - include: "#forall_instance_parameter_declaration_double_brace"
      - include: "#forall_instance_parameter_declaration_unicode"

  
  explicit_parameter_declaration:
    begin: \(
    end: \)
    beginCaptures:
      "0": { name: punctuation.section.parens.begin.agda }
    endCaptures:
      "0": { name: punctuation.section.parens.end.agda }
    name: meta.declaration.parameters.agda
    patterns:
      - include: "#parameter_declaration"
      - include: "#variable_type_signature"
      - include: "#type"

  explicit_forall_parameter_declaration:
    begin: (?<=^|[\s(){}.;@"])(forall|∀)\s*(\()
    end: \)
    beginCaptures:
      "1": { name: keyword.operator.forall.agda }
      "2": { name: punctuation.section.parens.begin.agda }
    endCaptures:
      "0": { name: punctuation.section.parens.end.agda }
    name: meta.declaration.parameters.agda
    patterns:
      - include: "#parameter_declaration"
      - include: "#forall_variable_type_signature"
      - include: "#type"

  
  implicit_parameter_declaration:
    begin: \{
    end: \}
    beginCaptures:
      "0": { name: punctuation.section.parens.begin.agda }
    endCaptures:
      "0": { name: punctuation.section.parens.end.agda }
    name: meta.declaration.parameters.agda
    patterns:
      - include: "#parameter_declaration"
      - include: "#variable_type_signature"
      - include: "#type"

  implicit_forall_parameter_declaration:
    begin: (?<=^|[\s(){}.;@"])(forall|∀)\s*(\{)
    end: \}
    beginCaptures:
      "1": { name: keyword.operator.forall.agda }
      "2": { name: punctuation.section.parens.begin.agda }
    endCaptures:
      "0": { name: punctuation.section.parens.end.agda }
    name: meta.declaration.parameters.agda
    patterns:
      - include: "#parameter_declaration"
      - include: "#forall_variable_type_signature"
      - include: "#type"

  
  instance_double_brace_parameter_declaration:
    begin: \{\{
    end: \}\}
    beginCaptures:
      "0": { name: punctuation.section.parens.begin.agda }
    endCaptures:
      "0": { name: punctuation.section.parens.end.agda }
    name: meta.declaration.parameters.agda
    patterns:
      - include: "#parameter_declaration"
      - include: "#variable_type_signature"
      - include: "#type"

  instance_double_brace_forall_parameter_declaration:
    begin: (?<=^|[\s(){}.;@"])(forall|∀)\s*(\{\{)
    end: \}\}
    beginCaptures:
      "1": { name: keyword.operator.forall.agda }
      "2": { name: punctuation.section.parens.begin.agda }
    endCaptures:
      "0": { name: punctuation.section.parens.end.agda }
    name: meta.declaration.parameters.agda
    patterns:
      - include: "#parameter_declaration"
      - include: "#forall_variable_type_signature"
      - include: "#type"

  
  instance_unicode_parameter_declaration:
    begin: (?<=^|[\s(){}.;@"])⦃(?=$|[\s(){}.;@"])
    end: (?<=^|[\s(){}.;@"])⦄(?=$|[\s(){}.;@"])
    beginCaptures:
      "0": { name: punctuation.section.parens.begin.agda }
    endCaptures:
      "0": { name: punctuation.section.parens.end.agda }
    name: meta.declaration.parameters.agda
    patterns:
      - include: "#parameter_declaration"
      - include: "#variable_type_signature"
      - include: "#type"

  instance_unicode_forall_parameter_declaration:
    begin: (?<=^|[\s(){}.;@"])(forall|∀)\s*((?<=^|[\s(){}.;@"])⦃(?=$|[\s(){}.;@"]))
    end: (?<=^|[\s(){}.;@"])⦄(?=$|[\s(){}.;@"])
    beginCaptures:
      "1": { name: keyword.operator.forall.agda }
      "2": { name: punctuation.section.parens.begin.agda }
    endCaptures:
      "0": { name: punctuation.section.parens.end.agda }
    name: meta.declaration.parameters.agda
    patterns:
      - include: "#parameter_declaration"
      - include: "#forall_variable_type_signature"
      - include: "#type"

  variable_type_signature:
    match: (^|\G)(([^:)}⦄]|(?<!^|[\s(){}.;@"])[:⦄]|[:⦄](?!$|[\s(){}.;@"]))+)[\s(){}.;@"](:)(?=$|[\s(){}.;@"]) # TODO: refactor, compare to forall_v...
    name: meta.declaration.variable_type_signature.agda
    captures:
      "2":
        patterns:
          - include: "#reserved"
          - include: "#variable_label"
          - name: invalid.name.variable.agda
            match: \S+
      "4": { name: keyword.operator.colon.agda }

  forall_variable_type_signature:
    match: (^|\G)(([^:)}⦄]|(?<!^|[\s(){}.;@"])[:⦄]|[:⦄](?!$|[\s(){}.;@"]))+)((:)(?=$|[\s(){}.;@"])|(?=$|[)}⦄]))
    name: meta.declaration.variable_type_signature.agda
    captures:
      "2":
        patterns:
          - include: "#reserved"
          - include: "#variable_label"
          - name: invalid.name.variable.agda
            match: \S+
      "4": { name: keyword.operator.colon.agda }

  type:
    patterns:
      - include: "#lambda_expression"
      - include: "#reserved"
      - include: "#type_token"

  type_token:
    match: (?<=^|[\s(){}.;@"])(((_?(?!')([^\s(){}.;@"_:=]|[^\s(){}.;@"_]{2,}))(_(?!')([^\s(){}.;@"_:=]|[^\s(){}.;@"_]{2,}))*_?)(\.(_?(?!')([^\s(){}.;@"_:=]|[^\s(){}.;@"_]{2,}))(_(?!')([^\s(){}.;@"_:=]|[^\s(){}.;@"_]{2,}))*_?)*|_)(?=$|[\s(){}.;@"])
    captures:
      "0":
        patterns:
          - include: "#reserved"
          - include: "#builtin_sort"
          - include: "#lambda_expression"
          - include: "#wildcard"
          - include: "#type_token_qualified_name"
          - name: invalid.name.type.token.agda
            match: \S+

  top_level_type_signature_colon_on_first_line:
    begin: (^|\G)(\s*)((_?(?!')([^\s(){}.;@"_:=]|[^\s(){}.;@"_]{2,}))(_(?!')([^\s(){}.;@"_:=]|[^\s(){}.;@"_]{2,}))*_?|_)\s+(:)(?=$|[\s(){}.;@"])
    while: ^\2\s
    name: meta.declaration.function.agda
    beginCaptures:
      "3":
        patterns:
          - include: "#term_name"
          - name: invalid.name.term.agda # TODO: other patterns take precedence, so this one never matches
            match: \S+
      "4":
        name: keyword.operator.colon.agda
    patterns:
      - include: "#parameter_declaration"
      - include: "#type"

  top_level_definition_equals_on_first_line:
    match: (^|\G)(\s*)(\S.*)\s+(=)(?=$|[\s(){}.;@"])
    name: meta.declaration.function.agda
    captures:
      "3":
        patterns:
          - include: "#reserved"
          - include: "#term_name"
      "4":
        name: keyword.operator.agda

  lambda_expression:
    begin: (?<=^|[\s(){}.;@"])(\\|λ)(?=$|[\s(){}.;@"])
    end: (?<=^|[\s(){}.;@"])(->|→)(?=$|[\s(){}.;@"])
    beginCaptures:
      "1": { name: keyword.operator.lambda.agda }
    endCaptures:
      "1": { name: keyword.operator.lambda.mapsto.agda }
    patterns:
      - include: "#parameter_declaration"
      - include: "#variable_label"

  discard:
    name: variable.language.discard.agda
    match: (?<=^|[\s(){}.;@"])_(?=$|[\s(){}.;@"])

  wildcard:
    name: variable.language.wildcard.agda
    match: (?<=^|[\s(){}.;@"])_(?=$|[\s(){}.;@"])

  placeholder:
    name: variable.language.placeholder.agda
    match: _

  qualify_punctuation:
    name: punctuation.separator.namespace.agda
    match: \.

  name_part:
    name: entity.name.part.agda
    match: (?<=^|[\s(){}.;@"])(?!')([^\s(){}.;@"_:=]|[^\s(){}.;@"_]{2,})(?=$|[\s(){}.;@"])

  name_token:
    name: entity.name.agda
    match: (?<=^|[\s(){}.;@"])(_?(?!')([^\s(){}.;@"_:=]|[^\s(){}.;@"_]{2,}))(_(?!')([^\s(){}.;@"_:=]|[^\s(){}.;@"_]{2,}))*_?(?=$|[\s(){}.;@"])
    captures:
      "0":
        patterns:
          - include: "#name_part"
          - include: "#placeholder"

  qualified_name:
    name: entity.name.qualified.agda
    match: (?<=^|[\s(){}.;@"])((_?(?!')([^\s(){}.;@"_:=]|[^\s(){}.;@"_]{2,}))(_(?!')([^\s(){}.;@"_:=]|[^\s(){}.;@"_]{2,}))*_?)(\.(_?(?!')([^\s(){}.;@"_:=]|[^\s(){}.;@"_]{2,}))(_(?!')([^\s(){}.;@"_:=]|[^\s(){}.;@"_]{2,}))*_?)*(?=$|[\s(){}.;@"])
    captures:
      "0":
        patterns:
          - include: "#qualify_punctuation"
          - include: "#name_token"

  type_token_qualified_name:
    name: storage.type.qualified.agda
    match: (?<=^|[\s(){}.;@"])((_?(?!')([^\s(){}.;@"_:=]|[^\s(){}.;@"_]{2,}))(_(?!')([^\s(){}.;@"_:=]|[^\s(){}.;@"_]{2,}))*_?)(\.(_?(?!')([^\s(){}.;@"_:=]|[^\s(){}.;@"_]{2,}))(_(?!')([^\s(){}.;@"_:=]|[^\s(){}.;@"_]{2,}))*_?)*(?=$|[\s(){}.;@"])
    captures:
      "0":
        patterns:
          - include: "#qualified_name"

  module_qualified_name:
    match: (?<=^|[\s(){}.;@"])((_?(?!')([^\s(){}.;@"_:=]|[^\s(){}.;@"_]{2,}))(_(?!')([^\s(){}.;@"_:=]|[^\s(){}.;@"_]{2,}))*_?)(\.(_?(?!')([^\s(){}.;@"_:=]|[^\s(){}.;@"_]{2,}))(_(?!')([^\s(){}.;@"_:=]|[^\s(){}.;@"_]{2,}))*_?)*(?=$|[\s(){}.;@"])
    name: entity.name.namespace.module.qualified.agda
    captures:
      "0":
        patterns:
          - include: "#qualified_name"

  module_label:
    patterns:
      - include: "#discard"
      - include: "#module_qualified_name"

  variable_label:
    patterns:
      - include: "#discard"
      - include: "#variable_name"

  variable_name:
    name: variable.parameter.term.agda
    match: (?<=^|[\s(){}.;@"])(_?(?!')([^\s(){}.;@"_:=]|[^\s(){}.;@"_]{2,}))(_(?!')([^\s(){}.;@"_:=]|[^\s(){}.;@"_]{2,}))*_?(?=$|[\s(){}.;@"])
    captures:
      "0":
        patterns:
          - include: "#reserved"
          - include: "#name_token"

  term_name:
    name: entity.name.function.term.agda
    match: (?<=^|[\s(){}.;@"])(_?(?!')([^\s(){}.;@"_:=]|[^\s(){}.;@"_]{2,}))(_(?!')([^\s(){}.;@"_:=]|[^\s(){}.;@"_]{2,}))*_?(?=$|[\s(){}.;@"])
    captures:
      "0":
        patterns:
          - include: "#discard"
          - include: "#name_token"

  hole:
    name: meta.hole.block.agda
    contentName: meta.hole.block.content.agda
    begin: \{\!
    end: \!\}
    beginCaptures:
      "0": { name: punctuation.definition.hole.agda }
    endCaptures:
      "0": { name: punctuation.definition.hole.agda }
    patterns:
      - include: "#hole"

  pragma:
    name: meta.preprocessor.pragma.block.agda
    contentName: meta.preprocessor.pragma.block.content.agda
    begin: "{-#"
    captures:
      "0": { name: punctuation.definition.pragma.agda }
    end: "#-}"

  block_comment:
    name: comment.block.agda
    begin: \{-
    end: -\}
    beginCaptures:
      "0": { name: punctuation.definition.comment.agda }
    endCaptures:
      "0": { name: punctuation.definition.comment.agda }
    patterns:
      - include: "#block_comment"

  dash_comment:
    name: comment.line.double_dash.agda
    match: (?<=^|[\s(){}.;@"])(--).*$
    captures:
      "1": { name: punctuation.definition.comment.agda }

  escape_character:
    name: constant.character.escape.agda
    match: \\(\d+|0[xX]\h+|a|b|t|n|v|f|\\|'|"|NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL)
  escape_control_character:
    name: constant.character.escape.control.agda
    match: \^[A-Z@\[\]\\\^_]

  literal:
    patterns:
      - name: string.quoted.double.agda
        begin: \"
        end: \"
        beginCaptures:
          "0": { name: punctuation.definition.string.begin.agda }
        endCaptures:
          "0": { name: punctuation.definition.string.end.agda }

        patterns:
          - include: "#escape_character"
          - include: "#escape_control_character"
      - name: constant.character.quoted.single.agda
        begin: (?<=^|[\s(){}.;@"])\'
        end: \'
        beginCaptures:
          "0": { name: punctuation.definition.character.begin.agda }
        endCaptures:
          "0": { name: punctuation.definition.character.end.agda }
        patterns:
          - include: "#escape_character"
          - include: "#escape_control_character"

      - name: constant.numeric.integer.agda
        match: (?<=^|[\s(){}.;@"])(-?(0[xX]\h+|0[bB][01]+|\d+(_\d+)*))(?=$|[\s(){}.;@"])
      - name: constant.numeric.float.agda
        match: (?<=^|[\s(){}.;@"])(-?\d+\.\d+([eE][+-]?\d+)?|-?\d+[eE][+-]?\d+)(?=$|[\s(){}.;@"])

  builtin_sort:
    name: support.type.sort.agda
    match: (?<=^|[\s(){}.;@"])((SSet|Set|Prop)ω?(\d*|[₀₁₂₃₄₅₆₇₈₉]*)|(LevelUniv))(?=$|[\s(){}.;@"])

  reserved:
    patterns:
      - include: "#literal"

      - name: keyword.operator.agda
        match: (?<=^|[\s(){}.;@"])(forall|->|[=\?→∀\\λ:])(?=$|[\s(){}.;@"])

      - name: keyword.operator.constraint.agda
        match: (?<=^|[\s(){}.;@"])\.(?!$|[\s;})])

      - name: keyword.control.agda
        match: (?<=^|[\s(){}.;@"])(abstract|constructor|do|field|forall|import|in|infix|infixl|infixr|instance|interleaved|let|macro|module|mutual|open|pattern|postulate|primitive|record|rewrite|syntax|tactic|variable|where|with)(?=$|[\s(){}.;@"])

      - name: storage.modifier.agda
        match: (coinductive|eta-equality|inductive|no-eta-equality|private|public)

      - comment: match keywords
        name: keyword.control.agda
        match: (?<=^|[\s(){}.;@"])(overlap|quote|quoteTerm|unquote|unquoteDecl|unquoteDef)(?=$|[\s(){}.;@"])

      - name: keyword.control.agda
        match: (?<=^|[\s(){}.;@"])(abstract|constructor|do|field|forall|import|in|infix|infixl|infixr|instance|interleaved|let|macro|module|mutual|open|pattern|postulate|primitive|record|rewrite|syntax|tactic|variable|where|with)(?=$|[\s(){}.;@"])

      - name: keyword.control.open_import.agda
        match: (?<=^|[\s(){}.;@"])(hiding|public|renaming|using)(?=$|[\s(){}.;@"])
