$schema: https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json
name: Agda
scopeName: source.agda
fileTypes: [agda]
keyEquivalent: ^~A

{% set boundary_char = '[\s(){}.;@"]' %}
{% set token_boundary_start = '(?<=^|' + boundary_char + ')' %}
{% set token_boundary_end = '(?=$|' + boundary_char + ')' %}
{% set name_part = '(?!\')([^\s(){}.;@"_:=]|[^\s(){}.;@"_]{2,})' %}
{% set name_token = '(_?' + name_part + ')(_' + name_part + ')*_?' %}
{% set name_qualified = '(' + name_token + ')(\.' + name_token + ')*' %}

patterns:
  - include: "#literal"
  - include: "#pragma"
  - include: "#block-comment"
  - include: "#dash-comment"

  - include: "#module-declaration"
  - include: "#data-declaration"
  - include: "#record-declaration"
  - include: "#open-import-statement"

  - include: "#infix-statement"
  - include: "#constructor-statement"

  - include: "#lambda-expression"
  - include: "#builtin-sort"
  - include: "#reserved"

  - include: "#top-level-type-signature-colon-on-first-line"
  # - include: "#top-level-definition-equals-on-first-line"

  - include: "#wildcard"
  - include: "#discard"

  - comment: badly placed keywords
    name: invalid.illegal.keyword.agda
    match: {{ token_boundary_start }}(data|module|record|where){{ token_boundary_end }}

  - include: "#qualified-name"

repository:
  module-declaration:
    contentName: meta.declaration.module.agda
    begin: (^|\G)\s*(module){{ token_boundary_end }}
    end: ({{ token_boundary_start }}where{{ token_boundary_end }})|^\1\S
    beginCaptures:
      "2": { name: keyword.control.module.agda }
    endCaptures:
      "0": { name: keyword.control.where.module.agda }
    patterns:
      - begin: (?<=(^|(^|{{ boundary_char }})module\s)\s*)({{ name_qualified }}|_){{ token_boundary_end }}
        end: (?={{ boundary_char }}where($|{{ boundary_char }}))
        beginCaptures:
          "0":
            patterns:
              - include: "#discard"
              - include: "#module-qualified-name"
        contentName: meta.declaration.parameters.module.agda
        patterns:
          - include: "#parameter-declaration"
          - include: "#reserved"

  data-declaration:
    contentName: meta.declaration.data.agda
    begin: (^|\G)\s*(data){{ token_boundary_end }}
    end: ((?<={{ boundary_char }})where{{ token_boundary_end }})|^\1\S
    beginCaptures:
      "2": { name: keyword.control.data.agda }
    endCaptures:
      "1": { name: keyword.control.where.data.agda }
    patterns:
      - begin: (?<=(^|(^|{{ boundary_char }})data\s)\s*)({{ name_token }}|_){{ token_boundary_end }}
        end: (?={{ boundary_char }}where($|{{ boundary_char }}))
        beginCaptures:
          "0":
            patterns:
              - include: "#module-label"
        contentName: meta.declaration.parameters.data.agda
        patterns:
          - include: "#parameter-declaration"
          - include: "#type" # This one only matches after the colon, as all arguments before the colon will have been matched by #parameter-declaration
          - include: "#reserved" # TODO: this is a bit of a hack, would rather recognize the colon more deliberately

  record-declaration:
    contentName: meta.declaration.record.agda
    begin: (^|\G)\s*(record){{ token_boundary_end }}
    end: ({{ token_boundary_start }}where{{ token_boundary_end }})|^\1\S
    beginCaptures:
      "2": { name: keyword.control.record.agda }
    endCaptures:
      "1": { name: keyword.control.where.record.agda }
    patterns:
      - comment: Capture name of record
        begin: (?<=(^|(^|{{ boundary_char }})record\s)\s*)({{ name_token }}|_){{ token_boundary_end }}
        end: (?={{ boundary_char }}where($|{{ boundary_char }}))
        beginCaptures:
          "0":
            patterns:
              - include: "#module-label"
        contentName: meta.declaration.parameters.record.agda
        patterns:
          - include: "#parameter-declaration"
          - include: "#type"
          - include: "#reserved" # TODO: this is a bit of a hack, would rather recognize the colon more deliberately

  open-import-statement:
    begin: (^|\G)(\s*)(import|open(\s+import)?)(?=$|\s)
    beginCaptures:
      "3": { name: keyword.control.open-import }
    while: ^\2\s
    patterns:
      - begin: \(
        beginCaptures:
          "0": { name: punctuation.section.parens.begin.agda }
        end: \)
        endCaptures:
          "0": { name: punctuation.section.parens.end.agda }
        name: meta.statement.open-import.names.agda
        patterns:
          - match: {{ token_boundary_start }}to{{ token_boundary_end }}
            name: keyword.other.to.agda
          - include: "#term-name"
      - include: "#reserved"
      - include: "#module-qualified-name"

  infix-statement:
    begin: (^|\G)(\s*)(infix(l|r)?){{ token_boundary_end }}
    while: ^\2\s
    beginCaptures:
      "3": { name: keyword.control.infix.agda }
    name: meta.statement.infix.agda
    contentName: meta.declaration.infix.arguments.agda
    patterns:
      - include: "#literal"
      - include: "#term-name"

  constructor-statement:
    begin: (^|\G)(\s*)(constructor){{ token_boundary_end }}
    while: ^\2\s
    beginCaptures:
      "3": { name: keyword.control.constructor.agda }
    name: meta.statement.constructor.agda
    contentName: invalid
    patterns:
      - include: "#literal"
      - include: "#term-name"

  parameter-declaration:
    patterns:
      - include: "#forall-explicit-parameter-declaration"
      - include: "#forall-instance-parameter-declaration"
      - include: "#forall-implicit-parameter-declaration"
      - include: "#explicit-parameter-declaration"
      - include: "#instance-parameter-declaration"
      - include: "#implicit-parameter-declaration"

  forall-explicit-parameter-declaration:
    begin: {{ token_boundary_start }}(forall|∀)\s*(\()
    end: \)
    beginCaptures:
      "1": { name: keyword.operator.forall.agda }
      "2": { name: punctuation.section.parens.begin.agda }
    endCaptures:
      "0": { name: punctuation.section.parens.end.agda }
    name: meta.declaration.parameters.agda
    patterns:
      - include: "#parameter-declaration"
      - include: "#forall-variable-type-signature"
      - include: "#type"

  forall-implicit-parameter-declaration:
    begin: {{ token_boundary_start }}(forall|∀)\s*(\{)
    end: \}
    beginCaptures:
      "1": { name: keyword.operator.forall.agda }
      "2": { name: punctuation.section.parens.begin.agda }
    endCaptures:
      "0": { name: punctuation.section.parens.end.agda }
    name: meta.declaration.parameters.agda
    patterns:
      - include: "#parameter-declaration"
      - include: "#forall-variable-type-signature"
      - include: "#type"

  forall-instance-parameter-declaration:
    patterns:
      - include: "#forall-instance-parameter-declaration-double-brace"
      - include: "#forall-instance-parameter-declaration-unicode"

  forall-instance-parameter-declaration-double-brace:
    begin: {{ token_boundary_start }}(forall|∀)\s*(\{\{)
    end: \}\}
    beginCaptures:
      "1": { name: keyword.operator.forall.agda }
      "2": { name: punctuation.section.parens.begin.agda }
    endCaptures:
      "0": { name: punctuation.section.parens.end.agda }
    name: meta.declaration.parameters.agda
    patterns:
      - include: "#parameter-declaration"
      - include: "#forall-variable-type-signature"
      - include: "#type"

  forall-instance-parameter-declaration-unicode:
    begin: {{ token_boundary_start }}(forall|∀)\s+(⦃){{ token_boundary_end }}
    end: {{ token_boundary_start }}⦄{{ token_boundary_end }}
    beginCaptures:
      "1": { name: keyword.operator.forall.agda }
      "2": { name: punctuation.section.parens.begin.agda }
    endCaptures:
      "0": { name: punctuation.section.parens.end.agda }
    name: meta.declaration.parameters.agda
    patterns:
      - include: "#parameter-declaration"
      - include: "#forall-variable-type-signature"
      - include: "#type"

  explicit-parameter-declaration:
    begin: \(
    end: \)
    beginCaptures:
      "0": { name: punctuation.section.parens.begin.agda }
    endCaptures:
      "0": { name: punctuation.section.parens.end.agda }
    name: meta.declaration.parameters.agda
    patterns:
      - include: "#parameter-declaration"
      - include: "#variable-type-signature"
      - include: "#type"

  implicit-parameter-declaration:
    begin: \{
    end: \}
    beginCaptures:
      "0": { name: punctuation.section.parens.end.agda }
    endCaptures:
      "0": { name: punctuation.section.parens.end.agda }
    name: meta.declaration.parameters.agda
    patterns:
      - include: "#parameter-declaration"
      - include: "#variable-type-signature"
      - include: "#type"

  instance-parameter-declaration:
    patterns:
      - include: "#instance-parameter-declaration-double-brace"
      - include: "#instance-parameter-declaration-unicode"

  instance-parameter-declaration-double-brace:
    begin: \{\{
    end: \}\}
    name: meta.declaration.parameters.agda
    beginCaptures:
      "0": { name: punctuation.section.parens.end.agda }
    endCaptures:
      "0": { name: punctuation.section.parens.end.agda }
    patterns:
      - include: "#parameter-declaration"
      - include: "#variable-type-signature"
      - include: "#type"

  instance-parameter-declaration-unicode:
    begin: {{ token_boundary_start }}⦃{{ token_boundary_end }}
    end: {{ token_boundary_start }}⦄{{ token_boundary_end }}
    name: meta.declaration.parameters.agda
    beginCaptures:
      "0": { name: punctuation.section.parens.end.agda }
    endCaptures:
      "0": { name: punctuation.section.parens.end.agda }
    patterns:
      - include: "#parameter-declaration"
      - include: "#variable-type-signature"
      - include: "#type"

  variable-type-signature:
    match: (^|\G)(([^:)}⦄]|(?<!^|{{ boundary_char }})[:⦄]|[:⦄](?!$|{{ boundary_char }}))+){{ boundary_char }}(:){{ token_boundary_end }}
    name: meta.declaration.variable-type-signature.agda
    captures:
      "2":
        patterns:
          - include: "#reserved"
          - include: "#variable-label"
          - name: invalid.name.variable.agda
            match: \S+
      "4": { name: keyword.operator.colon.agda }

  forall-variable-type-signature:
    match: (^|\G)(([^:)}⦄]|(?<!^|{{ boundary_char }})[:⦄]|[:⦄](?!$|{{ boundary_char }}))+)((:){{ token_boundary_end }}|(?=$|[)}⦄]))
    name: meta.declaration.variable-type-signature.agda
    captures:
      "2":
        patterns:
          - include: "#reserved"
          - include: "#variable-label"
      "4": { name: keyword.operator.colon.agda }

  type:
    patterns:
      - include: "#lambda-expression"
      - include: "#type-token"

  type-token:
    match: {{ token_boundary_start }}({{ name_token }}|_){{ token_boundary_end }}
    captures:
      "0":
        patterns:
          - include: "#reserved"
          - include: "#builtin-sort"
          - include: "#lambda-expression"
          - include: "#wildcard"
          - include: "#type-token-qualified-name"
          - name: invalid.name.type.token.agda
            match: \S+

  top-level-type-signature-colon-on-first-line:
    begin: (^|\G)(\s*)({{ name_token }}|_)\s+(:){{ token_boundary_end }}
    while: ^\2\s
    name: meta.declaration.function.agda
    beginCaptures:
      "3":
        patterns:
          - include: "#term-name"
          - name: invalid.name.term.agda # TODO: other patterns take precedence, so this one never matches
            match: \S+

      "4":
        name: keyword.operator.agda
    patterns:
      - include: "#parameter-declaration"
      - include: "#type"

  top-level-definition-equals-on-first-line:
    match: (^|\G)(\s*)(\S.*)\s+(=){{ token_boundary_end }}
    name: meta.declaration.function.agda
    captures:
      "3":
        patterns:
          - include: "#reserved"
          - include: "#term-name"
      "4":
        name: keyword.operator.agda

  lambda-expression:
    begin: {{ token_boundary_start }}(\\|λ){{ token_boundary_end }}
    end: {{ token_boundary_start }}(->|→){{ token_boundary_end }}
    beginCaptures:
      "1": { name: keyword.operator.lambda.agda }
    endCaptures:
      "1": { name: keyword.operator.lambda.mapsto.agda }
    patterns:
      - include: "#parameter-declaration"
      - include: "#variable-label"

  discard:
    name: variable.language.discard.agda
    match: {{ token_boundary_start }}_{{ token_boundary_end }}

  wildcard:
    name: variable.language.wildcard.agda
    match: {{ token_boundary_start }}_{{ token_boundary_end }}

  placeholder:
    name: variable.language.placeholder.agda
    match: _

  qualify-punctiation:
    name: punctuation.separator.namespace.agda
    match: \.

  name-part:
    name: entity.name.part.agda
    match: {{ token_boundary_start }}{{ name_part }}{{ token_boundary_end }}

  name-token:
    name: entity.name.agda
    match: {{ token_boundary_start }}{{ name_token }}{{ token_boundary_end }}
    captures:
      "0":
        patterns:
          - include: "#name-part"
          - include: "#placeholder"

  qualified-name:
    name: entity.name.qualified.agda
    match: {{ token_boundary_start }}{{ name_qualified }}{{ token_boundary_end }}
    captures:
      "0":
        patterns:
          - include: "#qualify-punctuation"
          - include: "#name-token"

  type-token-qualified-name:
    name: storage.type.qualified.agda
    match: {{ token_boundary_start }}{{ name_qualified }}{{ token_boundary_end }}
    captures:
      "0":
        patterns:
          - include: "#qualify-punctuation"
          - include: "#name-token"

  module-qualified-name:
    match: {{ token_boundary_start }}{{ name_qualified }}{{ token_boundary_end }}
    name: entity.name.namespace.module.qualified.agda
    captures:
      "0":
        patterns:
          - include: "#qualify-punctuation"
          - include: "#module-label"

  module-label:
    name: entity.name.namespace.module.agda
    match: {{ token_boundary_start }}{{ name_token }}{{ token_boundary_end }}
    captures:
      "0":
        patterns:
          - include: "#discard"
          - include: "#name-token"

  variable-label:
    patterns:
      - include: "#discard"
      - include: "#variable-name"

  variable-name:
    name: variable.parameter.term.agda
    match: {{ token_boundary_start }}{{ name_token }}{{ token_boundary_end }}
    captures:
      "0":
        patterns:
          - include: "#reserved"
          - include: "#name-token"

  term-name:
    name: entity.name.function.term.agda
    match: {{ token_boundary_start }}{{ name_token }}{{ token_boundary_end }}
    captures:
      "0":
        patterns:
          - include: "#discard"
          - include: "#name-token"

  hole:
    name: meta.hole.block.agda
    contentName: meta.hole.block.content.agda
    begin: \{\!
    end: \!\}
    beginCaptures:
      "0": { name: punctuation.definition.hole.agda }
    endCaptures:
      "0": { name: punctuation.definition.hole.agda }
    patterns:
      - include: "#hole"

  pragma:
    name: meta.preprocessor.pragma.block.agda
    contentName: meta.preprocessor.pragma.block.content.agda
    begin: "{-#"
    captures:
      "0": { name: punctuation.definition.pragma.agda }
    end: "#-}"

  block-comment:
    name: comment.block.agda
    begin: \{-
    end: -\}
    beginCaptures:
      "0": { name: punctuation.definition.comment.agda }
    endCaptures:
      "0": { name: punctuation.definition.comment.agda }
    patterns:
      - include: "#block-comment"

  dash-comment:
    name: comment.line.double-dash.agda
    match: {{ token_boundary_start }}(--).*$
    captures:
      "1": { name: punctuation.definition.comment.agda }

  escape-character:
    name: constant.character.escape.agda
    match: \\(\d+|0[xX]\h+|a|b|t|n|v|f|\\|'|"|NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL)
  escape-control-character:
    name: constant.character.escape.control.agda
    match: \^[A-Z@\[\]\\\^_]

  literal:
    patterns:
      - name: string.quoted.double.agda
        begin: \"
        end: \"
        beginCaptures:
          "0": { name: punctuation.definition.string.begin.agda }
        endCaptures:
          "0": { name: punctuation.definition.string.end.agda }

        patterns:
          - include: "#escape-character"
          - include: "#escape-control-character"
      - name: constant.character.quoted.single.agda
        begin: {{ token_boundary_start }}\'
        end: \'
        beginCaptures:
          "0": { name: punctuation.definition.character.begin.agda }
        endCaptures:
          "0": { name: punctuation.definition.character.end.agda }
        patterns:
          - include: "#escape-character"
          - include: "#escape-control-character"

      - name: constant.numeric.integer.agda
        match: {{ token_boundary_start }}(-?(0[xX]\h+|0[bB][01]+|\d+(_\d+)*)){{ token_boundary_end }}
      - name: constant.numeric.float.agda
        match: {{ token_boundary_start }}(-?\d+\.\d+([eE][+-]?\d+)?|-?\d+[eE][+-]?\d+){{ token_boundary_end }}

  builtin-sort:
    name: support.type.sort.agda
    match: {{ token_boundary_start }}((SSet|Set|Prop)ω?(\d*|[₀₁₂₃₄₅₆₇₈₉]*)|(LevelUniv)){{ token_boundary_end }}

  reserved:
    patterns:
      - include: "#literal"

      - name: keyword.operator.agda
        match: {{ token_boundary_start }}(forall|->|[=\?→∀\\λ:]){{ token_boundary_end }}

      - name: keyword.operator.constraint.agda
        match: {{ token_boundary_start }}\.(?!$|[\s;})])

      - name: keyword.control.agda
        match: {{ token_boundary_start }}(abstract|constructor|do|field|forall|import|in|infix|infixl|infixr|instance|interleaved|let|macro|module|mutual|open|pattern|postulate|primitive|record|rewrite|syntax|tactic|variable|where|with){{ token_boundary_end }}

      - name: storage.modifier.agda
        match: (coinductive|eta-equality|inductive|no-eta-equality|private|public)

      - comment: match keywords
        name: keyword.control.agda
        match: {{ token_boundary_start }}(overlap|quote|quoteTerm|unquote|unquoteDecl|unquoteDef){{ token_boundary_end }}

      - name: keyword.control.agda
        match: {{ token_boundary_start }}(abstract|constructor|do|field|forall|import|in|infix|infixl|infixr|instance|interleaved|let|macro|module|mutual|open|pattern|postulate|primitive|record|rewrite|syntax|tactic|variable|where|with){{ token_boundary_end }}

      - name: keyword.control.open-import.agda
        match: {{ token_boundary_start }}(hiding|public|renaming|using){{ token_boundary_end }}
