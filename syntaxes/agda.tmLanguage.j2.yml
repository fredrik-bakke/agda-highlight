$schema: https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json
comment: This TextMate Grammar file has been generated from a Jinja2 YAML template.
name: Agda
scopeName: source.agda
fileTypes: [agda]
keyEquivalent: ^~A

{% set BOUNDARY_CHARS = '\s.;{}()@"' %}
{% set boundary_char = '[' + BOUNDARY_CHARS + ']' %}
{% set token_boundary_start = '(?<=^|' + boundary_char + ')' %}
{% set token_boundary_end = '(?=$|' + boundary_char + ')' %}
{% set name_part = '(?!\')([^' + BOUNDARY_CHARS + '_:=|]|[^' + BOUNDARY_CHARS + '_]{2,})' %}
{% set name_token = '_?' + name_part + '(_' + name_part + ')*_?' %}
{% set name_qualified = name_token + '(\.' + name_token + ')*' %}
{% macro token(s) %}{{ token_boundary_start }}{{ s }}{{ token_boundary_end }}{% endmacro %}

patterns:
  - include: "#the_usual"

repository:
  module_declaration:
    contentName: meta.declaration.module.agda
    begin: \G\s*(module){{ token_boundary_end }}
    end: ({{ token('where') }})|^(?!\1\s) #TODO: when we make this into a block, this will be a new begin instead of an end
    beginCaptures:
      "1": { name: keyword.control.module.agda }
    endCaptures:
      "0": { name: keyword.control.where.module.agda }
    patterns:
      - begin: (?<=(\G|(\G|{{ boundary_char }})module\s)\s*)({{ name_qualified }}|_){{ token_boundary_end }}
        end: (?={{ boundary_char }}where($|{{ boundary_char }}))
        beginCaptures:
          "0":
            name: entity.name.namespace.module.agda
            patterns:
              - include: "#module_label"
        contentName: meta.declaration.parameters.module.agda
        patterns:
          - include: "#parameter_declaration"
          - include: "#agda_syntax"

  data_declaration:
    contentName: meta.declaration.data.agda
    begin: \G(\s*)(data){{ token_boundary_end }}
    end: ({{ token('where') }})|^(?!\1\s)
    beginCaptures:
      "2": { name: keyword.control.data.agda }
    endCaptures:
      "1": { name: keyword.control.where.data.agda }
    patterns:
      - begin: (?<=(\G|(\G|{{ boundary_char }})data\s)\s*)({{ name_token }}|_){{ token_boundary_end }}
        end: (?={{ boundary_char }}where($|{{ boundary_char }}))
        beginCaptures:
          "0":
            name: entity.name.namespace.module.agda
            patterns:
              - include: "#module_label"
        contentName: meta.declaration.parameters.data.agda
        patterns:
          - include: "#parameter_declaration"
          - include: "#type" # This one only matches after the colon, as all arguments before the colon will have been matched by #parameter_declaration
          - include: "#agda_syntax" # TODO: this is a bit of a hack, would rather recognize the colon more deliberately

  record_declaration:
    contentName: meta.declaration.record.agda
    begin: \G(\s*)(record){{ token_boundary_end }}
    end: ({{ token('where') }})|^(?!\1\s)
    beginCaptures:
      "2": { name: keyword.control.record.agda }
    endCaptures:
      "1": { name: keyword.control.where.record.agda }
    patterns:
      - comment: Capture name of record
        begin: (?<=(\G|(\G|{{ boundary_char }})record\s)\s*)({{ name_token }}|_){{ token_boundary_end }}
        end: (?={{ boundary_char }}where($|{{ boundary_char }}))
        beginCaptures:
          "0":
            name: entity.name.namespace.module.agda
            patterns:
              - include: "#module_label"
        contentName: meta.declaration.parameters.record.agda
        patterns:
          - include: "#parameter_declaration"
          - include: "#type"
          - include: "#agda_syntax" # TODO: this is a bit of a hack, would rather recognize the colon more deliberately

  open_import_statement:
    begin: \G(\s*)(import|open(\s+import)?)(?=$|\s)
    beginCaptures:
      "2": { name: keyword.control.open_import }
    while: \G\1(?=\s)
    patterns:
      - begin: \(
        beginCaptures:
          "0": { name: punctuation.section.parens.begin.agda }
        end: \)
        endCaptures:
          "0": { name: punctuation.section.parens.end.agda }
        name: meta.statement.open_import.names.agda
        patterns:
          - match: {{ token('to') }}
            name: keyword.other.to.agda
          - include: "#term_name"
      - include: "#agda_syntax"
      - include: "#module_qualified_name"

  infix_block:
    begin: \G(\s*)(infix[lr]?){{ token_boundary_end }}
    while: \G\1(?=\s)
    beginCaptures:
      "2": { name: keyword.control.infix.agda }
    name: meta.statement.infix.agda
    contentName: meta.declaration.infix.arguments.agda
    patterns:
      - include: "#agda_literals"
      - include: "#term_name"

  constructor_block:
    begin: \G(\s*)(constructor){{ token_boundary_end }}
    while: \G\1(?=\s)
    beginCaptures:
      "2": { name: keyword.control.constructor.agda }
    name: meta.statement.constructor.agda
    patterns:
      - include: "#agda_literals"
      - include: "#term_name"

  parameter_declaration:
    patterns:
      - include: "#explicit_forall_parameter_declaration"
      - include: "#instance_forall_parameter_declaration"
      - include: "#implicit_forall_parameter_declaration"
      - include: "#explicit_parameter_declaration"
      - include: "#instance_parameter_declaration"
      - include: "#implicit_parameter_declaration"

  instance_parameter_declaration:
    patterns:
      - include: "#instance_parameter_declaration_double_brace"
      - include: "#instance_parameter_declaration_unicode"

  instance_forall_parameter_declaration:
    patterns:
      - include: "#forall_instance_parameter_declaration_double_brace"
      - include: "#forall_instance_parameter_declaration_unicode"

{% for param_decl in [
  {"id": "explicit", "begin": "\\(", "end": "\\)"},
  {"id": "implicit", "begin": "\\{", "end": "\\}"},
  {"id": "instance_double_brace", "begin": "\\{\\{", "end": "\\}\\}"},
  {"id": "instance_unicode", "begin": token_boundary_start + "⦃" + token_boundary_end, "end": token_boundary_start + "⦄" + token_boundary_end}
] %}
  {{ param_decl.id }}_parameter_declaration:
    begin: {{ param_decl.begin }}
    end: {{ param_decl.end }}
    beginCaptures:
      "0": { name: punctuation.section.parens.{{ param_decl.id }}.begin.agda }
    endCaptures:
      "0": { name: punctuation.section.parens.{{ param_decl.id }}.end.agda }
    name: meta.declaration.parameters.{{ param_decl.id }}.agda
    patterns:
      - include: "#agda_syntax" # TODO: refine
      - include: "#parameter_declaration"
      - include: "#variable_type_signature"
      - include: "#type"

  {{ param_decl.id }}_forall_parameter_declaration:
    begin: {{ token_boundary_start }}(forall|∀)\s*({{ param_decl.begin }})
    end: {{ param_decl.end }}
    beginCaptures:
      "1": { name: keyword.operator.forall.{{ param_decl.id }}.agda }
      "2": { name: punctuation.section.parens.{{ param_decl.id }}.begin.agda }
    endCaptures:
      "0": { name: punctuation.section.parens.{{ param_decl.id }}.end.agda }
    name: meta.declaration.parameters.{{ param_decl.id }}.agda
    patterns:
      - include: "#agda_syntax" # TODO: refine
      - include: "#parameter_declaration"
      - include: "#forall_variable_type_signature"
      - include: "#type"
{% endfor %}

  variable_type_signature:
    match: \G(([^:)}⦄]|(?<!^|{{ boundary_char }})[:⦄]|[:⦄](?!$|{{ boundary_char }}))+){{ boundary_char }}(:){{ token_boundary_end }} # TODO: refactor, compare to forall_v...
    name: meta.declaration.variable_type_signature.agda
    captures:
      "1":
        patterns:
          - include: "#agda_syntax"
          - include: "#variable_label"
          - name: invalid.name.variable.agda
            match: {{ token('[^\s(){};@"]+') }}
      "3": { name: keyword.operator.colon.agda }
  # variable_type_signature:
  #   match: \G(((?!{{ token(':') }}).)+){{ token('(:)') }}
  #   name: meta.declaration.variable_type_signature.agda
  #   captures:
  #     "1":
  #       patterns:
  #         - include: "#agda_expression"
  #         - include: "#variable_label"
  #         - name: invalid.name.variable.agda
  #           match: {{ token('[^\s(){};@"]+') }}
  #     "3": { name: keyword.operator.colon.agda }

  forall_variable_type_signature:
    match: \G(([^:)}⦄]|(?<!^|{{ boundary_char }})[:⦄]|[:⦄](?!$|{{ boundary_char }}))+)((:){{ token_boundary_end }}|(?=$|[)}⦄]))
    name: meta.declaration.variable_type_signature.agda
    captures:
      "1":
        patterns:
          - include: "#agda_syntax"
          - include: "#variable_label"
          - name: invalid.name.variable.forall.agda
            match: {{ token('[^\s(){};@"]+') }}
      "3": { name: keyword.operator.colon.agda }

  type:
    patterns:
      - include: "#agda_syntax"
      - include: "#type_token"

  type_token:
    match: {{ token('(' + name_qualified + '|_)') }}
    captures:
      "1":
        patterns:
          - include: "#agda_syntax"
          - include: "#agda_builtin_sorts"
          - include: "#lambda_expression_start"
          - include: "#wildcard"
          - include: "#type_token_qualified_name"
          - name: invalid.name.type.token.agda
            match: {{ token('((?!\.)' + boundary_char + ')+') }}

  term_type_signature_colon_on_first_line:
    begin: \G(\s*)({{ name_token }}|_)\s+(:){{ token_boundary_end }}
    while: \G\1(?=\s)
    name: meta.declaration.function.agda
    beginCaptures:
      "2":
        patterns:
          - include: "#term_name"
          - name: invalid.name.term.agda # TODO: other patterns take precedence, so this one never matches
            match: {{ token('((?!\.)' + boundary_char + ')+') }}
      "6":
        name: keyword.operator.colon.agda
    patterns:
      - include: "#parameter_declaration"
      - include: "#type"

  term_definition_equals_on_first_line:
    match: \G(\s*)(\S.*)\s+(=){{ token_boundary_end }}
    name: meta.declaration.function.agda
    captures:
      "2":
        patterns:
          - include: "#agda_syntax"
          - include: "#term_name"
      "3":
        name: keyword.operator.agda

  lambda_expression_start:
    begin: {{ token('(\\\\|λ)') }}
    end: {{ token('(->|→)') }}
    beginCaptures:
      "1": { name: keyword.operator.lambda.agda }
    endCaptures:
      "1": { name: keyword.operator.lambda.mapsto.agda }
    patterns:
      - include: "#explicit_parameter_declaration"
      - include: "#instance_parameter_declaration"
      - include: "#implicit_parameter_declaration"
      - include: "#agda_expressions"
      - include: "#variable_label"

  discard:
    name: variable.language.discard.agda
    match: {{ token('_') }}

  wildcard:
    name: variable.language.wildcard.agda
    match: {{ token('_') }}

  placeholder:
    name: variable.language.placeholder.agda
    match: _

  qualify_punctuation:
    name: punctuation.separator.namespace.period.agda
    match: \.

  dot_pattern:
    patterns:
      - include: "#dot_pattern_single_token"
      - include: "#dot_pattern_parenthesized"

  dot_pattern_single_token:
    match: {{ token_boundary_start }}(?<!\.)(\.)\s*({{ name_qualified }}){{ token_boundary_end }}
    name: meta.block.dot_pattern.agda
    captures:
      "1": { name: keyword.operator.dot_pattern.period.agda }
      "2":
        name: comment.block.dot_pattern.agda
        patterns:
          - include: "#qualified_name"

  dot_pattern_parenthesized:
    begin: {{ token_boundary_start }}(?<!\.)(\.)\s*(\() #! there can be a newline before the opening parenthesis
    end: \)
    name: meta.block.dot_pattern.agda
    contentName: comment.block.dot_pattern.agda
    beginCaptures:
      "1": { name: keyword.operator.dot_pattern.period.agda}
      "2": { name: punctuation.definition.dot_pattern.begin.agda }
    endCaptures:
      "0": { name: punctuation.definition.dot_pattern.begin.agda }
    patterns:
      - include: "#dot_pattern_internal_parentheses"

  dot_pattern_internal_parentheses:
    comment: Ensures that we match the correct closing parenthesis
    begin: \(
    end: \)
    patterns:
      - include: "#dot_pattern_internal_parentheses"
      - include: "#agda_syntax"

  name_part:
    name: entity.name.part.agda
    match: {{ token(name_part) }}

  name_token:
    name: entity.name.agda
    match: {{ token(name_token) }}
    captures:
      "0":
        patterns:
          - include: "#name_part"
          - include: "#placeholder"

  qualified_name:
    name: entity.name.qualified.agda
    match: {{ token(name_qualified) }}
    captures:
      "0":
        patterns:
          - include: "#qualify_punctuation"
          - include: "#name_token"

  type_token_qualified_name:
    name: storage.type.qualified.agda
    match: {{ token(name_qualified) }}
    captures:
      "0":
        patterns:
          - include: "#qualified_name"

  module_qualified_name:
    match: {{ token(name_qualified) }}
    name: entity.name.namespace.module.qualified.agda
    captures:
      "0":
        patterns:
          - include: "#qualified_name"

  module_label:
    patterns:
      - include: "#discard"
      - include: "#module_qualified_name"

  variable_label:
    patterns:
      - include: "#discard"
      - include: "#variable_name"

  variable_name:
    name: variable.parameter.term.agda
    match: {{ token(name_token) }}
    captures:
      "0":
        patterns:
          - include: "#agda_constants"
          - include: "#name_token"

  term_name:
    name: entity.name.function.term.agda
    match: {{ token('(' + name_token + '|_)') }}
    captures:
      "0":
        patterns:
          - include: "#discard"
          - include: "#name_token"

  hole:
    patterns:
      - include: "#hole_questionmark"
      - include: "#hole_parenthesized"

  hole_questionmark:
    match: {{ token('\?') }}
    name: variable.language.questionmark.agda
    captures:
      "0": { name: punctuation.hole.questionmark.agda }

  hole_parenthesized:
    name: meta.block.hole.agda
    contentName: meta.block.hole.content.agda
    begin: \{\!
    end: \!\}
    beginCaptures:
      "0": { name: punctuation.definition.hole.begin.agda }
    endCaptures:
      "0": { name: punctuation.definition.hole.end.agda }
    patterns:
      - include: "#hole_parenthesized"
      - include: "#agda_syntax"

  pragma:
    name: meta.preprocessor.pragma.block.agda
    contentName: meta.preprocessor.pragma.block.content.agda
    begin: "{-#"
    captures:
      "0": { name: punctuation.definition.pragma.agda }
    end: "#-}"

  block_comment:
    name: comment.block.agda
    begin: \{-
    end: -\}
    beginCaptures:
      "0": { name: punctuation.definition.comment.agda }
    endCaptures:
      "0": { name: punctuation.definition.comment.agda }
    patterns:
      - include: "#block_comment"

  dash_comment:
    name: comment.line.double_dash.agda
    match: {{ token_boundary_start }}(--).*$
    captures:
      "1": { name: punctuation.definition.comment.agda }

  escape_character:
    name: constant.character.escape.agda
    match: \\(\d+|0[xX]\h+|a|b|t|n|v|f|\\|'|"|NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL)

  escape_control_character:
    name: constant.character.escape.control.agda
    match: \^[A-Z@\[\]\\\^_]

  agda_literals:
    patterns:
      - name: string.quoted.double.agda
        begin: \"
        end: \"
        beginCaptures:
          "0": { name: punctuation.definition.string.begin.agda }
        endCaptures:
          "0": { name: punctuation.definition.string.end.agda }

        patterns:
          - include: "#escape_character"
          - include: "#escape_control_character"
      - name: constant.character.quoted.single.agda
        begin: {{ token_boundary_start }}\'
        end: \'
        beginCaptures:
          "0": { name: punctuation.definition.character.begin.agda }
        endCaptures:
          "0": { name: punctuation.definition.character.end.agda }
        patterns:
          - include: "#escape_character"
          - include: "#escape_control_character"

      - name: constant.numeric.integer.agda
        match: {{ token('(-?(0[xX]\h+|0[bB][01]+|\d+(_\d+)*))') }}
      - name: constant.numeric.float.agda
        match: {{ token('(-?\d+\.\d+([eE][+-]?\d+)?|-?\d+[eE][+-]?\d+)') }}

  agda_builtin_sorts:
    name: support.type.sort.agda
    match: {{ token('((SSet|Set|Prop)ω?(\d*|[₀-₉]*)|LevelUniv)') }}

  agda_simple_blocks:
    patterns:
{% for block_keyword in ["abstract", "field", "instance", "macro", "mutual", "postulate", "private", "public", "variable", "where"] %} # TODO: do, let
      - comment: {{ block_keyword }} block #TODO: continue working on this
        begin: \G(\s*)({{ block_keyword }}){{ token_boundary_end }}
        while: \G\1(?=\s)
        name: meta.block.{{block_keyword}}.agda
        beginCaptures:
          "2": { name: keyword.control.{{block_keyword}}.agda }
        patterns:
          - include: "#the_usual"
{% endfor %}

  agda_block_declarations:
    patterns:
      - include: "#module_declaration"
      - include: "#data_declaration"
      - include: "#record_declaration"

  agda_layout_blocks:
    patterns:
      - include: "#agda_block_declarations"
      - include: "#infix_block" #! Not documented as a layout block
      - include: "#constructor_block"
      - include: "#agda_simple_blocks"

  agda_preprocessing_syntax:
    patterns:
      - include: "#pragma"
      - include: "#hole"
      - include: "#block_comment"
      - include: "#dash_comment"

  agda_constants:
    patterns:
      - include: "#agda_literals"
      - include: "#agda_builtin_sorts"

  agda_expressions:
    patterns:
      - include: "#hole"
      - include: "#lambda_expression_start"
      # TODO: forall
      # TODO: parameter decl
      - include: "#agda_constants"
      - include: "#wildcard"
      - name: keyword.operator.agda
        match: {{token('(forall|->|[∀→\\\\λ])')}}


  agda_syntax:
    patterns:
      - include: "#agda_expressions"
      - include: "#agda_preprocessing_syntax"

      - name: keyword.operator.agda
        match: {{ token('(\.\.\.|[=|])') }}

      - include: "#dot_pattern"

      - name: keyword.control.agda
        match: {{ token('(abstract|constructor|do|field|forall|import|in|infix[lr]?|instance|interleaved|let|macro|module|mutual|open|pattern|postulate|primitive|record|rewrite|syntax|tactic|variable|where|with)') }}
      - name: storage.modifier.agda
        match: {{ token('((no-)?eta-equality|(co)?inductive|private|public)') }}
      - name: keyword.control.agda
        match: {{ token('(overlap|quote(Term)?|unquote(Decl|Def)?)') }}
      - name: keyword.control.open_import.agda
        match: {{ token('(hiding|public|renaming|using)') }}

  agda_statements:
    patterns:
      - include: "#open_import_statement"
      - include: "#term_type_signature_colon_on_first_line"
      # - include: "#term_definition_equals_on_first_line"

  the_usual:
    patterns:
      - include: "#agda_layout_blocks"
      - include: "#agda_statements"
      - include: "#agda_syntax"

      - comment: badly placed keywords
        name: invalid.illegal.keyword.agda
        match: {{ token('(data|module|record|where)') }}

      - include: "#qualified_name" # TODO: define agda_token pattern
